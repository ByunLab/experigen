// database connection Experiment.prototype.loadUserID = function () {	var e = this;	$.ajax({		url: CONFIG.baseURL +  "lib/getuserid.cgi",  //CONFIG.proxyURL +		success: function (data) {			e.userFileName = data;			return true;		},		async: false,		error: function() {			console.error("Error! User id could not be generated.");			return false;		}	});	var code =  String.fromCharCode(65 + Math.floor(Math.random()*26)) + String.fromCharCode(65 + Math.floor(Math.random()*26)) + String.fromCharCode(65 + Math.floor(Math.random()*26));	this.userCode = code + e.userFileName;		//console.log(this.userCode);	this.fieldsToSave["userCode"] = true;	this.fieldsToSave["userFileName"] = true;	return true;}Experiment.prototype.sendForm = function (formObj) {	//console.debug(formObj.serialize());	$.ajax({		type: 'POST',		url: CONFIG.baseURL +  "lib/dbwrite.cgi",  //CONFIG.proxyURL +		data: formObj.serialize(),		success: function (data) {			//console.debug(data);			return true;		},		async: false,		error: function() {			console.error("Error! Your response could not be saved.");			return false;		}	});}Experiment.prototype.loadItems = function () {	var e = this;	var key = "";	$.ajax({ 		url: CONFIG.proxyURL + "data/items.txt",		success: function(data) {			// in here, "this" is not the experiment!!!			// it's some jquery thing			var lines = data.replace("\r","").split("\n");			var fields = lines[0].replace(/(\n|\r)+$/, '').split("\t");			if (!fields.uniqueNonEmpty()) {				alert("Field names in items.txt must be unique and non-empty!");				return false;			}			key = fields[0];			var keys = new Array();			for (var i=1; i<lines.length; i++) {				var line = lines[i].replace(/(\n|\r)+$/, '').split("\t");				keys.push(line[0]);				var item = {};				for (var j=0; j<line.length; j++) {					item[ fields[j] ] = line[j];				}				item.screentype = e.TRIAL;				e.items.push(item);			}			if(!keys.uniqueNonEmpty()) {				alert("In items.txt, the values of the first column must be unique and non-empty!");				return false;			}			return true;		},		async: false,		error: function() {			console.error("Oh no!");			return false;		}	});	e.fieldsToSave[key] = true;	return true;}Experiment.prototype.loadResource = function (name) {	var e = this;	var key = "";	var items = new Array();		$.ajax({		url: CONFIG.proxyURL + "data/" + name + ".txt",		success: function(data) {			// in here, "this" is not the experiment!!!			// it's some jquery thing			var lines = data.split("\n");			var fields = lines[0].replace(/(\n|\r)+$/, '').split("\t");			if (!fields.uniqueNonEmpty()) {				alert("Field names in " + name + ".txt must be unique and non-empty!");				return false;			}			key = fields[0];			var keys = new Array();			for (var i=1; i<lines.length; i++) {				var line = lines[i].replace(/(\n|\r)+$/, '').split("\t");				keys.push(line[0]);				var frame = {};				for (var j=0; j<line.length; j++) {					frame[ fields[j] ] = line[j];				}				//console.log(frame);				items.push(frame);							}			if(!keys.uniqueNonEmpty()) {				alert("In " + name + ".txt, the values of the first column must be unique and non-empty!");				return false;			}			return true;		},		async: false,		error: function() {			console.error("Oh no!");			return false;		}	});	return {table: items, key: key};}/*Experiment.prototype.loadFrameSentences = function () {	var e = this;	var key = "";	$.ajax({		url: CONFIG.proxyURL + "data/frames.txt",		success: function(data) {			// in here, "this" is not the experiment!!!			// it's some jquery thing			var lines = data.split("\n");			var fields = lines[0].replace(/(\n|\r)+$/, '').split("\t");			if (!fields.uniqueNonEmpty()) {				alert("Field names in frames.txt must be unique and non-empty!");				return false;			}			key = fields[0];			var keys = new Array();			for (var i=1; i<lines.length; i++) {				var line = lines[i].replace(/(\n|\r)+$/, '').split("\t");				keys.push(line[0]);				var frame = {};				for (var j=0; j<line.length; j++) {					frame[ fields[j] ] = line[j];				}				e.frames.push(frame);			}			if(!keys.uniqueNonEmpty()) {				alert("In frames.txt, the values of the first column must be unique and non-empty!");				return false;			}			return true;		},		async: false,		error: function() {			console.error("Oh no!");			return false;		}	});	e.frameKey = key;	return true;} */